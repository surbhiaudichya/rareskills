 /** 
 *  EMITTER HUFF EXERCISE
 *  
 *  The task is to enable this contract, when the function `value(uint256, uint256)` is called, should
 *  emit an event named `Value(uint256 indexed, uint256)`
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function value(uint256, uint256) payable returns()
 
 #define event Value(uint256 indexed, uint256)


 #define macro MAIN() = takes(0) returns(0) {
    // At compile time, the invocation of __EVENT_HASH is substituted with PUSH32 event_hash, where event_hash is the selector hash of the passed event definition or string. If a string is passed, it must represent a valid event signature i.e. "TestEvent(uint256, address indexed)"
    0x00                     // Stack Output: [0x00] | push byte offset in the calldata.
    calldataload             // Stack Output: [calldata @ 0x00] | 32-byte value starting from the given offset of the calldata.
    0xE0 shr                 // [func_sig (calldata @ 0x00 >> 0xE0)]
    __FUNC_SIG(value)        // [func_sig(value), func_sig]
    eq                       // [func_sig(sumArray) == func_sig]
    value jumpi              // []
    0x00 0x00 revert         // Revert if no function signature matched
    value:
    0x24
    calldataload             // Stack Output: [secound value in calldata @ 0x24] | 32-byte value starting from the given offset of the calldata. 
    0x00 mstore              // Stack Output:  [] | Meoroy Output: [value2: param2] 
    0x04
    calldataload             // Stack Output: [first value in calldata @ 0x04, secound value in calldata @ 0x24] | 32-byte value starting from the given offset of the calldata.
    __EVENT_HASH(Value)      // Stack Output: [topic1: sig, topic2: param1] 
    0x20                     // Stack Output: [0x00, topic1: sig, topic2: param1]
    0x00                     // Stack Output: [memory_offset: 0x00, size: 0x20, topic1: sig, topic2: param1] | Meoroy Output: [value2: param2] 
    log2
 }
