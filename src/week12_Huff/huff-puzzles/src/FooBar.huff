
/** 
 *  FOO_BAR HUFF EXERCISE
 *
 *  Majority of ethereum contracts hold logic divide this logic into functions which users can specify and call to execute a particular logic without clashing into the other
 *  
 *  The task is to write within the `MAIN` macro below, huff code that mimics 2 solidity functions. 
 *      - One named `foo()` that simply returns 2,
 *      - the second named `bar()` that simply returns 3.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function foo() payable returns(uint256)
 #define function bar() payable returns(uint256)

 #define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload     // Stack Output: [calldata @ 0x00] 32-byte value starting from the given offset of the calldata.
    0xE0 shr              // [func_sig (calldata @ 0x00 >> 0xE0)]
    dup1                  // [func_sig, func_sig]
    __FUNC_SIG(foo)       // [func_sig(foo), func_sig, func_sig]
    eq                    // [func_sig(foo) == func_sig, func_sig]
    foo jumpi             // [func_sig]
    __FUNC_SIG(bar)       // [func_sig(bar), func_sig]
    eq                    // [func_sig(bar) == func_sig]
    bar jumpi             // []
    0x00 0x00 revert      // revert if non matching selector
    foo:
        0x02
        0x00 mstore
        0x20 0x00 return 
    bar:
        0x03
        0x00 mstore
        0x20 0x00 return
 }